# CADR Project

## Overview

- This project is a digitally accurate functional simulation of the MIT CADR Lisp Machine.
- This project is not a timing verification, hence no delays if it is not required for the function.
- This project will not be synthesized. It will be simulated using GHDL with LLVM backend.
- This project complies with VHDL-2008. You MUST write VHDL-2008 compliant code.

## Project Structure

- The project has three major subdirectories; ttl, dip and cadr.
- The ttl subdirectory contains the TTL components. These are put into sn74, other, misc and unsorted packages.
- The dip subdirectory contains the wrappers of TTL components, so called DIP components. These are put into dip package.
- The cadr subdirectory contains the MIT CADR schematic entities. These are put into cadr package.
- `cadr` entities depend on `dip`, `dip` entities depend on ttl packages (sn74, other, misc and unsorted).
- The project uses no other library, everything is put into the work library.
- `rom` directory contains the ROM/PROM data. rom/X_Y.hex is the data for ROM chip with designator Y on schematic page X.

### File Naming

- Entity X is implemented in `X.vhd`.
- Testbench for entity X is implemented in `X_tb.vhd`.

### File Extensions

- `.vhd`: VHDL source files
- `.o`: Compiled object files
- `.cf`: GHDL design library files
- `_tb`: Executable testbench files
- `.vcd/.ghw`: Waveform files

## Build System

The project uses a Makefile based build system.

There is only one Makefile, in the project root.

The build artifacts (work library, objects, executables) are put into the `build` directory.

Make targets are as follows.

- `make all`: Compile all
- `make ttl-check`: Run ttl testbenches
- `make clean`: Remove all build artifacts (build directory)
- `make suds`: Create SUDS vhd files

A single testbench (for example build/X_tb) can be run with `make run-X`. 

A single testbench (for example build/X_tb) can be run to create waveforms with `make wf-X`.

`make suds` has to be run after repo is cloned. Otherwise, `make` will not succeed.

## Development Workflow

### Code Modification Guidelines

- NEVER modify the Makefile.
- NEVER modify port interface lists. They are manually maintained.
- NEVER modify the package and component definitions. They ar emanually maintained.
- NEVER assume meaning from port definition, ALWAYS consult the datasheets.
- ALWAYS aim to have strict datasheet behavior.
- Ignore the power pins, VCC and GND, in the datasheets. Only the digital behavior is implemented in this project.
- After changing a source file, run its testbench rather than calling generic targets like make all or make check. For example, run `TB=build/td25_tb make run-tb` to check `ttl/td25.vhd` rather than running `make all` or `make check`.
- Only warnings or errors SHOULD be reported/printed in testbenches. Thus, USE only assert statements in testbenches. DO NOT USE report statements to unconditionally print messages. Successful testbenches should report nothing.
- DO NOT try to delete the testbenches you have created. The testbenches are kept in the project.
- DO NOT write testbenches for dip components.

### Git Workflow

- NEVER automatically commit changes.
- When creating a commit message, summarize the changes in bullet-points and add "Co-Authored-By: Cursor <noreply@metebalci.com>" on its own line at the end.

## Differences from datasheets

- SN74241 BENB is implemented as active high even though it is active low in the datasheet.

## Notes

- dip_5600 and dip_5610 both uses im5600. im5600 and im5610 are digitally equivalent.
- Use `rom/dspctl_2f22.hex` for the testbenches related to im5600.
- Use `rom/prom0_1b17.hex` for the testbenches related to sn74472 and dm74472.
- The signal \machruna l\ is named correct, do not try to fix it.

## Resources

- CADR Schematics are in the PNG files linked from this URL: https://tumbleweed.nu/lm-3/schematics.html
- Component datasheets for TTL logic families
- VHDL-2008 language reference
- GHDL documentation at https://ghdl.github.io/ghdl/