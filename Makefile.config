.SUFFIXES:

.PARALLEL:

# ===== CONFIGURABLE USER VARIABLES =====
# do not modify these but export on your shell
CADR4_HDLCOMPILER 	?= ghdl
# use TIL replacement that prints to console during simulation
CADR4_TILONCONSOLE  ?= 1
# set to 0 for no limit
CADR4_STOPTIME      ?= 0
# set to 1 to disable assertions to improve performance
CADR4_NOASSERTS		?= 0
# ==========

# ===== CONFIGURABLE SYSTEM VARIABLES =====
# these are variables but probably you dont want to change these
CADR4_GHDL 					?= ghdl
CADR4_GHDL_VPI_COMPILER 	?= $(CC)
CADR4_GHDL_VPI_LINKER 		?= $(CC)
CADR4_NVC 					?= nvc
CADR4_NVC_VHPI_CC			?= $(CC)
CADR4_NVC_VHPI_USER_H_DIR	?= /usr/local/include
# ==========

# ===== CHECK IF HDLCOMPILER IS SUPPORTED =====
ifeq ($(CADR4_HDLCOMPILER),ghdl)
ifeq (, $(shell which $(CADR4_GHDL)))
$(error "$(CADR4_GHDL) is not in path")
endif
else ifeq ($(CADR4_HDLCOMPILER),nvc)
ifeq (, $(shell which $(CADR4_NVC)))
$(error "$(CADR4_NVC) is not in path")
endif
else
$(error "Unsupported HDL compiler: $(CADR4_HDLCOMPILER)")
endif 
# ==========

# default goal
.DEFAULT_GOAL := all

# folders
BUILDDIR	  	:= build
ROMDIR	 	  	:= rom

CADR_DIR		:= cadr
CADR_SUDS_DIR	:= cadr/suds
CADR_DRWDIR	  	:= doc/ai/cadr

ICMEM_DIR		:= cadr
ICMEM_SUDS_DIR  := cadr/suds
ICMEM_DRWDIR    := doc/ai/cadr

BUSINT_DIR		:= cadr1
BUSINT_SUDS_DIR	:= cadr1/suds
BUSINT_DRWDIR	:= doc/ai/cadr1

COSIM_VPI_DIR	:= cosim_vpi
COSIM_VHPI_DIR	:= cosim_vhpi

# OS specific settings
OS := $(shell uname -s)

# this is required to support sed both on Linux and macOS
ifeq ($(OS),Darwin)
    SEDOPTIONS := -i ''
else
    SEDOPTIONS := -i
endif

# SRCS are vhdl sources
# source files are found by wildcard
CADR_SRCS   := $(wildcard $(CADR_DIR)/*.vhd) $(wildcard $(CADR_SUDS_DIR)/*.vhd)
ICMEM_SRCS  := $(wildcard $(ICMEM_DIR)/*.vhd) $(wildcard $(ICMEM_SUDS_DIR)/*.vhd)
BUSINT_SRCS := $(wildcard $(BUSINT_DIR)/*.vhd) $(wildcard $(BUSINT_SUDS_DIR)/*.vhd)
DIP_SRCS    := $(wildcard dip/*.vhd)
HELPER_SRCS := $(wildcard helper/*.vhd)
TTL_SRCS    := $(wildcard ttl/*.vhd)

# EXES mean these are testbenches and can be run
# also means these will be elaborated
# EXES should be unit names not vhd file names or paths
CADR_EXES   := $(patsubst %.vhd,%,$(notdir $(wildcard $(CADR_DIR)/*_tb.vhd)))
ICMEM_EXES  := $(patsubst %.vhd,%,$(notdir $(wildcard $(ICMEM_DIR)/*_tb.vhd)))
BUSINT_EXES := $(patsubst %.vhd,%,$(notdir $(wildcard $(BUSINT_DIR)/*_tb.vhd)))
DIP_EXES    := $(patsubst %.vhd,%,$(notdir $(wildcard dip/*_tb.vhd)))
HELPER_EXES := $(patsubst %.vhd,%,$(notdir $(wildcard helper/*_tb.vhd)))
TTL_EXES    := $(patsubst %.vhd,%,$(notdir $(wildcard ttl/*_tb.vhd)))

# cosimulation is special because it also has C sources
# SRCS and EXES are similar to above
# but it also has CSRCS (*.c) and COBJS (*.c => *.o)

# ghdl uses VPI for cosimulation
COSIM_VPI_SRCS 	:= $(wildcard $(COSIM_VPI_DIR)/*.vhd)
COSIM_VPI_EXES 	:= $(patsubst %.vhd,%,$(notdir $(wildcard $(COSIM_VPI_DIR)/*_tb.vhd)))
COSIM_VPI_CSRCS := $(wildcard $(COSIM_VPI_DIR)/*.c)
COSIM_VPI_COBJS := $(addprefix $(BUILDDIR)/,$(notdir $(patsubst %.c,%.o,$(COSIM_VPI_CSRCS))))
COSIM_VPI_LIB	:= $(BUILDDIR)/cosim.vpi

# nvc uses VHPI for cosimulation
COSIM_VHPI_SRCS 	:= $(wildcard $(COSIM_VHPI_DIR)/*.vhd)
COSIM_VHPI_EXES 	:= $(patsubst %.vhd,%,$(notdir $(wildcard $(COSIM_VHPI_DIR)/*_tb.vhd)))
COSIM_VHPI_CSRCS 	:= $(wildcard $(COSIM_VHPI_DIR)/*.c)
COSIM_VHPI_LIB		:= $(BUILDDIR)/cosim.so

# similar to above, but cadr_tb testbenches are auto generated
# cadr_tb
CADR_TB_SRC := build/cadr_tb.vhd
CADR_TB_EXE := cadr_tb
# cadr_boot_tb which auto boots the cadr
CADR_BOOT_TB_SRC := build/cadr_boot_tb.vhd
CADR_BOOT_TB_EXE := cadr_boot_tb

# all sources and executables
SRCS := $(CADR_SRCS) $(ICMEM_SRCS) $(BUSINT_SRCS) $(DIP_SRCS) $(HELPER_SRCS) $(TTL_SRCS) $(CADR_TB_SRC) $(CADR_BOOT_TB_SRC)
EXES := $(CADR_EXES) $(ICMEM_EXES) $(BUSINT_EXES) $(DIP_EXES) $(HELPER_EXES) $(TTL_EXES) $(CADR_TB_EXE) $(CADR_BOOT_TB_EXE)

ifeq ($(CADR4_HDLCOMPILER),ghdl)
SRCS += $(COSIM_VPI_SRCS)
EXES += $(COSIM_VPI_EXES)
else ifeq ($(CADR4_HDLCOMPILER),nvc)
SRCS += $(COSIM_VHPI_SRCS)
EXES += $(COSIM_VHPI_EXES)
endif

# ===== CONFIG rules =====

.PHONY: clean
clean:
	$(RM) -rf $(BUILDDIR)

.PHONY: print-config
print-config::
	$(info CADR_SRCS: $(CADR_SRCS))
	$(info CADR_EXES: $(CADR_EXES))
	$(info ICMEM_SRCS: $(ICMEM_SRCS))
	$(info ICMEM_EXES: $(ICMEM_EXES))
	$(info BUSINT_SRCS: $(BUSINT_SRCS))
	$(info BUSINT_EXES: $(BUSINT_EXES))
	$(info DIP_SRCS: $(DIP_SRCS))
	$(info DIP_EXES: $(DIP_EXES))
	$(info HELPER_SRCS: $(HELPER_SRCS))
	$(info HELPER_EXES: $(HELPER_EXES))
	$(info TTL_SRCS: $(TTL_SRCS))
	$(info TTL_EXES: $(TTL_EXES))	
	$(info COSIM_SRCS: $(COSIM_SRCS))
	$(info COSIM_EXES: $(COSIM_EXES))
	$(info CADR_TB_SRC: $(CADR_TB_SRC))
	$(info CADR_TB_EXE: $(CADR_TB_EXE))
	$(info SRCS: $(SRCS))
	$(info EXES: $(EXES))	
	$(info COSIM_VPI_SRCS: $(COSIM_VPI_SRCS))
	$(info COSIM_VPI_EXES: $(COSIM_VPI_EXES))	
	$(info COSIM_VPI_CSRCS: $(COSIM_VPI_CSRCS))
	$(info COSIM_VPI_COBJS: $(COSIM_VPI_COBJS))
	$(info COSIM_VPI_LIB: $(COSIM_VPI_LIB))
	$(info COSIM_VHPI_SRCS: $(COSIM_VHPI_SRCS))
	$(info COSIM_VHPI_EXES: $(COSIM_VHPI_EXES))
	$(info COSIM_VHPI_CSRCS: $(COSIM_VHPI_CSRCS))
	$(info COSIM_VHPI_COBJS: $(COSIM_VHPI_COBJS))
	$(info COSIM_VHPI_LIB: $(COSIM_VHPI_LIB))
	$(info CADR4_HDLCOMPILER: $(CADR4_HDLCOMPILER))
	$(info CADR4_HDLSTD: $(CADR4_HDLSTD))
	$(info CADR4_CCOMPILER: $(CADR4_CCOMPILER))
	$(info CADR4_GHDL: $(CADR4_GHDL))
	$(info CADR4_NVC: $(CADR4_NVC))
	$(info CADR4_TILONCONSOLE: $(CADR4_TILONCONSOLE))
	$(info CADR4_STOPTIME: $(CADR4_STOPTIME))
	$(info CADR4_NOASSERTS: $(CADR4_NOASSERTS))
# this is to avoid make complaining about nothing to be done
	@echo > /dev/null