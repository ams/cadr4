# ghdl cannot work with parallel runs
.NOTPARALLEL:

# vhdl standard 2008
GHDLSTD := 08

# no debug, full optimization, since we are not debugging GHDL
GHDLIMPORTOPTIONS	:= -v -g0 -O3
GHDLMAKEOPTIONS		:= -v -g0 -O3 -Wno-delayed-checks

# asserts can be disabled to improve performance
ifeq ($(CADR4_NOASSERTS),1)
GHDLSIMOPTIONS := --assert-level=none --ieee-asserts=disable
else
GHDLSIMOPTIONS := --backtrace-severity=warning --assert-level=warning
endif

# ghdl import and make works weird, all the build process is weird
# there is no sane way to build object files manually in this way
# building (and linking) a tb will build object files
# all objects and _tb executables are build into $(BUILDDIR)

$(BUILDDIR)/work-obj$(GHDLSTD).cf: $(SRCS)
	mkdir -p $(BUILDDIR)
	$(CADR4_GHDL) import $(GHDLIMPORTOPTIONS) --std=$(GHDLSTD) --workdir=$(BUILDDIR) $^

# %_tb has no %.vhd etc. dependency because these are resolved in cf
# ghdl make is like an extra layer over make build system

$(BUILDDIR)/%_tb: $(BUILDDIR)/work-obj$(GHDLSTD).cf
	mkdir -p $(BUILDDIR)
	$(CADR4_GHDL) make $(GHDLMAKEOPTIONS) --std=$(GHDLSTD) --workdir=$(BUILDDIR) -o $@ $(notdir $@)

# compile cosim vpi sources into objects
# this rule is not very nicely written but i couldnt write it better
# actually it should be a rule from COSIM_COBJS to COSIM_CSRCS without 
# depending on cosim (string) prefix
$(COSIM_VPI_COBJS): $(BUILDDIR)/%.o: $(COSIM_VPI_DIR)/%.c
	mkdir -p $(BUILDDIR)
	$(CADR4_GHDL) --vpi-compile -v $(CADR4_GHDL_VPI_COMPILER) -c $< -o $@

# link cosim objects to cosim.vpi
$(COSIM_VPI_LIB): $(COSIM_VPI_COBJS)
	mkdir -p $(BUILDDIR)
	$(CADR4_GHDL) --vpi-link -v $(CADR4_GHDL_VPI_LINKER) $(COSIM_VPI_COBJS) -o $@

.PHONY: all
all: $(addprefix $(BUILDDIR)/,$(EXES))

# below is smart handling of wave opt file
# if file does not exist, it is not used
# if file exists
## if first line is "recreate", then it is deleted and recreated
## else if first line is "ignore", then it is ignored
## else it is used

# cadr_tb is generated under build that is removed on clean
# so use the opt file in project root for that
WAVEOPTFILE := $(TB).opt
WAVEFILE := $(BUILDDIR)/$(TB).ghw
ifneq ("$(wildcard $(WAVEOPTFILE))","")
WAVEOPTCONTENTS := $(shell head -1 $(WAVEOPTFILE))
ifeq ("$(WAVEOPTCONTENTS)","recreate")
$(info recreating wave opt file: $(WAVEOPTFILE))
WAVEOPTFILERECREATE := 1
GHDLWAVEOPTIONS := --wave=$(WAVEFILE) --write-wave-opt=$(WAVEOPTFILE)
else ifeq ("$(WAVEOPTCONTENTS)","ignore")
$(info ignoring wave opt file: $(WAVEOPTFILE))
GHDLWAVEOPTIONS := --wave=$(WAVEFILE)
else
$(info using wave opt file: $(WAVEOPTFILE))
GHDLWAVEOPTIONS := --wave=$(WAVEFILE) --read-wave-opt=$(WAVEOPTFILE)
endif
else
GHDLWAVEOPTIONS := --wave=$(WAVEFILE)
endif

# add stoptime if requested
ifeq ($(CADR4_STOPTIME),0)
GHDLSTOPTIMEOPTION :=
else
GHDLSTOPTIMEOPTION := --stop-time=$(CADR4_STOPTIME)
endif

.PHONY: run-%
run-%: $(BUILDDIR)/%
	$< $(GHDLSIMOPTIONS)

.PHONY: cosim-run-%
cosim-run-%: $(BUILDDIR)/% $(COSIM_VPI_LIB)
	$< $(GHDLSIMOPTIONS) --vpi=$(COSIM_VPI_LIB)

.PHONY: wf-%
wf-%: $(BUILDDIR)/%
ifeq ($(WAVEOPTFILERECREATE),1)	
	$(RM) $(WAVEOPTFILE)
endif
	$< $(GHDLSIMOPTIONS) $(GHDLWAVEOPTIONS) $(GHDLSTOPTIMEOPTION)

.PHONY: cosim-wf-%
cosim-wf-%: $(BUILDDIR)/% $(COSIM_VPI_LIB)
ifeq ($(WAVEOPTFILERECREATE),1)	
	$(RM) $(WAVEOPTFILE)
endif
	$< $(GHDLSIMOPTIONS) --vpi=$(COSIM_VPI_LIB) $(GHDLWAVEOPTIONS) $(GHDLSTOPTIMEOPTION)